// pages/api/upload-file-resumable.js

import { google } from 'googleapis';
import formidable from 'formidable';
import fs from 'fs';
import path from 'path';

export const config = {
  api: {
    bodyParser: false,
  },
};

const drive = getDriveService();

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const form = new formidable.IncomingForm({ multiples: false, maxFileSize: 2 * 1024 * 1024 * 1024 }); // 2GB max
  form.uploadDir = path.join(process.cwd(), '/tmp');
  form.keepExtensions = true;

  form.parse(req, async (err, fields, files) => {
    if (err || !files.file) {
      return res.status(400).json({ error: 'Invalid upload' });
    }

    const file = files.file;
    const name = fields.name || 'Anonymous';

    const mimeType = file.mimetype || file.type;
    if (!/^image\/|^video\//.test(mimeType)) {
      return res.status(400).json({ error: 'Only image and video files are allowed.' });
    }

    const timestamp = Date.now();
    const ext = path.extname(file.originalFilename || file.newFilename || file.filepath);
    const fileName = `${name}--${timestamp}${ext}`;

    try {
      const driveRes = await drive.files.create({
        requestBody: {
          name: fileName,
          parents: [process.env.GOOGLE_DRIVE_FOLDER_ID],
        },
        media: {
          mimeType,
          body: fs.createReadStream(file.filepath),
        },
      });

      fs.unlinkSync(file.filepath); // Clean up
      return res.status(200).json({ fileId: driveRes.data.id });
    } catch (err) {
      console.error('Drive upload error:', err);
      return res.status(500).json({ error: 'Failed to upload to Drive' });
    }
  });
}

function getDriveService() {
  const auth = new google.auth.GoogleAuth({
    credentials: JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_JSON),
    scopes: ['https://www.googleapis.com/auth/drive'],
  });
  return google.drive({ version: 'v3', auth });
}
